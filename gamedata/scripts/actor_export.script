--[[
	actor_export.script by Penomatikus, 2023

    The Script registeres a callback for save_state and exports the following to <path-to-your-anomaly-installation>\appdata\logs\actor.json:
    - general health information: health, psi, radiation
    - most statistics of the actor you can see in the pda
    - the equipment names in all 12 slots
    - the current and actual protection stats of the helmet and outfit if any

    You MUST have https://github.com/Penomatikus/stalker-anomaly-json installed for the export to proceed; otherwise, a debug message will be displayed in the console.
]]

--- Registers a callback to enwoke export_actor on save 
function on_game_start()
    RegisterScriptCallback("save_state", export_actor)
end

-- CoC inventory slots indices
local slots = {
    knife       = 1,
    weapon_1    = 2,
    weapon_2    = 3,
    grenade     = 4,
    binoculars  = 5,
    bolt        = 6,
    outfit      = 7,
    pda         = 8,
    detector    = 9,
    torch       = 10,
    artefact    = 11,
    helmet      = 12,
    backpack    = 13
}

--- actor_max_value holds the max possible protection values of the actor 
local actor_max_value = {
	Burn         = SYS_GetParam(2,"actor_condition","fire_zone_max_power"),         -- 1.15  
	Shock        = SYS_GetParam(2,"actor_condition","electra_zone_max_power"),      -- 4.00  
	Radiation    = SYS_GetParam(2,"actor_condition","radio_zone_max_power"),        -- 0.055
	ChemicalBurn = SYS_GetParam(2,"actor_condition","acid_zone_max_power"),         -- 0.25
	Telepatic    = SYS_GetParam(2,"actor_condition","psi_zone_max_power"),          -- 0.25
	Strike       = 0.01, --TODO Values are copyed from: ui_debug_item.script ["outfit"]["strike_protection"].steps
	Explosion    = 0.01, --TODO Values are copyed from: ui_debug_item.script ["outfit"]["explosion_protection"].steps
	Wound        = SYS_GetParam(2,"actor_condition","max_wound_protection"),        -- 2.20,
	FireWound    = SYS_GetParam(2,"actor_condition","max_fire_wound_protection"),   -- 2.20,
}

local function get_section(actor_item)
    return actor_item and actor_item:section() or "?"
end

local function get_actor_item(db_actor, slot)
    return db_actor:item_in_slot(slots[slot]) or nil
end

---math_ptc p = W x 100 / G 
---@param w number percentage value
---@param g number basic value
---@return number p percentage
local function math_ptc(w, g) 
    return g and (w * 100) / g or 0
end

local function get_armour_protection(armour, condition, hitType)
    local current = utils_item.get_outfit_protection(armour, nil, hitType)
    local new = (current / condition) -- get_outfit_protection calls GetDefHitTypeProtection which is already multipling the armor condition 
    return {
        new         = new,
        current     = current,
        new_ptc     = math_ptc(new, actor_max_value[hitType]),
        current_ptc = math_ptc(current, actor_max_value[hitType]),
    } or {}
end

---get_actor_general takes db.actor and returns a new table with the actors name, rank, reputation and community
---@param db_actor table The global db.actor table
---@return table actor.general Actors general information or {}
local function get_actor_general(db_actor)
    return db_actor and {
        name = db_actor:character_name() or "empty_actor_name",
        rank = db_actor:character_rank() or "empty_actor_rank",
        rep = db_actor:character_reputation() or "empty_actor_reputation",
        community = db_actor:character_community() or "empty_actor_community",
    } or {}
end

---get_actor_status reads health, psi-health and current radiation status 
---@param db_actor table The global db.actor table
---@return table actor.status Actors general health status
local function get_actor_status(db_actor)
    return db_actor and {
        health = db_actor.health,
        psi = db_actor.psy_health,
        rad = db_actor.radiation,
    } or {}
end

---get_actor_armour_stats creates a table for the passed armour with its name, condition and all its actual and current protections same as the UI shows
---@param db_actor table The global db.actor table, where the current worn actors armour is read from
---@param armout_type string \"outfit\" or \"helmet\"
---@return table armour A table with stats of the amour
local function get_actor_armour_stats(db_actor, armout_type) 
    local armour_tbl = {}
    local armour = get_actor_item(db_actor, armout_type)
    if (armour) then
        armour_tbl.name = get_section(armour)
            condition = armour:condition()
            armour_tbl.condition = condition
            armour_tbl.burn      = get_armour_protection(armour, condition, "Burn")
			armour_tbl.shock     = get_armour_protection(armour, condition, "Shock")
			armour_tbl.chem      = get_armour_protection(armour, condition, "ChemicalBurn")
			armour_tbl.rad       = get_armour_protection(armour, condition, "Radiation")
			armour_tbl.psi       = get_armour_protection(armour, condition, "Telepatic")
			armour_tbl.rapture   = get_armour_protection(armour, condition, "Wound")
			armour_tbl.strike    = get_armour_protection(armour, condition, "Strike")
			armour_tbl.boom      = get_armour_protection(armour, condition, "Explosion")
            armour_tbl.balistic  = get_armour_protection(armour, condition, "FireWound")
        -- end
    end
    return armour_tbl
end

--- get_actor_equipment takes db.actor and returns a new table containing the current equipment names of the actor with money and weigth.
--- The equiped outfit and helmet, contains additional information about the current and actual protection status for each HitType
---@param db_actor table The global db.actor table
---@return table actor.equipment Information about the current equipped gear or {}
local function get_actor_equipment(db_actor)
    return db_actor and {
        artefact    = get_section(get_actor_item(db_actor, "artefact")),
        backpack    = get_section(get_actor_item(db_actor, "backpack")),
        binoculars  = get_section(get_actor_item(db_actor, "binoculars")),
        bolt        = get_section(get_actor_item(db_actor, "bolt")),
        detector    = get_section(get_actor_item(db_actor, "detector")),
        grenade     = get_section(get_actor_item(db_actor, "grenade")),
        knife       = get_section(get_actor_item(db_actor, "knife")),
        pda         = get_section(get_actor_item(db_actor, "pda")),
        torch       = get_section(get_actor_item(db_actor, "torch")),
        weapon_1    = get_section(get_actor_item(db_actor, "weapon_1")),
        weapon_2    = get_section(get_actor_item(db_actor, "weapon_2")),
        outfit      = get_actor_armour_stats(db_actor, "outfit"),
        helmet      = get_actor_armour_stats(db_actor, "helmet"),
        money       = db_actor:money() or "-",
        weigth      = db_actor:get_total_weight() or "-",
    } or {}
end

--- get_actor_statistics collects some statistics about the current actor about tasks, kills, artefacts and more
---@param m_data table The table you get, when you register a save_state callback and the game is beeing saved 
---@param task_mgr "CRandomTask" A task manager
---@return table statistics A table with a selection of the actors statistics
local function get_actor_statistics(m_data, task_mgr)
    -- exit early if game_statistics is not available (first start)
    if m_data.game_statistics == nil then return {} end

    local active_tasks = 0
    if task_mgr ~= nil then 
        for _ in pairs(task_mgr.task_info) do active_tasks = active_tasks + 1 end
    end

    local tasks_tbl = {
        active    = active_tasks,
        completed = m_data.game_statistics.actor_statistics.tasks_completed or 0,
        cancelled = m_data.game_statistics.actor_statistics.tasks_cancelled or 0,
        failed    = m_data.game_statistics.actor_statistics.tasks_failed or 0
    }

    local kills_tbl = {
        enemy   = m_data.game_statistics.actor_statistics.killed_stalkers_e or 0,
        friend  = m_data.game_statistics.actor_statistics.killed_stalkers_f or 0,
        neutral = m_data.game_statistics.actor_statistics.killed_stalkers_n or 0,
        monster = m_data.game_statistics.actor_statistics.killed_monsters or 0
    }

    local artys_tbl = {
        found    = m_data.game_statistics.actor_statistics.artefacts_found or 0,
        detected = m_data.game_statistics.actor_statistics.artefacts_detected or 0
    }

    local misc_tbl = {
        smash      = m_data.game_statistics.actor_statistics.boxes_smashed or 0,
        articles   = m_data.game_statistics.actor_statistics.articles or 0,
        emissions  = m_data.game_statistics.actor_statistics.emissions or 0,
        psi_storms = m_data.game_statistics.actor_statistics.psi_storms or 0,
        disguised  = m_data.game_statistics.actor_statistics.minutes_disguised or 0,
    }

    return {
        tasks = tasks_tbl,
        kills = kills_tbl,
        artys = artys_tbl,
        misc  = misc_tbl
    }
end

--- export_actor performs the collection and json export 
---@param m_data table The table you get, when you register a save_state callback and the game is beeing saved 
function export_actor(m_data)
    local actor = {}
    actor.status     = get_actor_status(db.actor)
    actor.general    = get_actor_general(db.actor)
    actor.equipment  = get_actor_equipment(db.actor)
    actor.statistics = get_actor_statistics(m_data, task_manager.get_task_manager())
    if utils_json then
        utils_json.to_logfile(actor, "actor")
    else
        printdbg("~ actor_export | the script utils_json is not installed", filename)
    end
end